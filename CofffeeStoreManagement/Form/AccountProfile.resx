<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AvKoAAAAAElFTkSuQmCC
</value>
  </data>
</root>